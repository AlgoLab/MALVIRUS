configfile: "config.malva.yaml"

import os
import datetime
import subprocess
import json
import re

pjoin = os.path.join

ref_config = config["paths"]["reference"]
vcf_config = config["paths"]["vcf"]
sample_config = config["paths"]["sample"]

working_dir = config["workdir"]
logs_dir = pjoin(working_dir, "logs")

def nowf():
    return str(datetime.datetime.today().replace(microsecond=0))

def format_json(cmd, result, returncode, inp, out, parameters = None):
    configs = config
    d = {}
    d['command'] = cmd
    d['result'] = result
    d['return_code'] = returncode
    d['config'] = configs
    d['input'] = {}
    for name, value in inp.items():
        d['input'][name] = value
    d['output'] = {}
    for name, value in out.items():
        d['output'][name] = value
    d['params'] = {}
    if parameters is not None:
        for name, value in parameters.items():
            d['params'][name] = value
    d['time'] = nowf()
    return json.dumps(d)

rule run:
    input:
        pjoin(working_dir, "malva.vcf")
        
# Run KMC
rule kmc:
    input:
        sample = sample_config
    output:
        kmc_out = pjoin(working_dir, "KMC", "kmers.kmc_pre")
    params:
        kmc_prefix = pjoin(working_dir, "KMC", "kmers"),
        kmc_tmp = pjoin(working_dir, "KMC", "tmp")
    threads: 4
    log:
        out = pjoin(logs_dir, "kmc.log"),
        time = pjoin(logs_dir, "kmc.time"),
        json = pjoin(logs_dir, "kmc.json")
    run:
        shell("mkdir -p {params.kmc_tmp}")
        cmdstr = f"~/covid/software/malva/KMC/bin/kmc -t{threads} -m4 -k43 -ci5 -cs750 -fm {input.sample} {params.kmc_prefix} {params.kmc_tmp} &> {log.out}"
        with open(log.json, "w") as jf:
            try:
                shell.check_output(cmdstr)
                jf.write(format_json(cmdstr, "Success", 0, input, output, params))
                shell("rm -fr {params.kmc_tmp}")
            except subprocess.CalledProcessError as e:
                jf.write(format_json(cmdstr, "Failed", e.returncode, input, output, params))
                shell("rm -fr {params.kmc_tmp}")
                raise e

# Run MALVA
rule malva:
    input:
        ref = ref_config,
        vcf = vcf_config,
        kmc = pjoin(working_dir, "KMC", "kmers.kmc_pre")
    params:
        kmc_prefix = pjoin(working_dir, "KMC", "kmers")
    output:
        vcf = pjoin(working_dir, "malva.vcf")
    threads: 1
    log:
        out = pjoin(logs_dir, "malva.log"),
        time = pjoin(logs_dir, "malva.time"),
        json = pjoin(logs_dir, "malva.json")
    run:
        cmdstr = f"~/covid/software/malva/malva-geno -k 35 \
-r 43 -c 750 -b 1 {input.ref} {input.vcf} {params.kmc_prefix} > {output.vcf} 2> {log.out}"
        with open(log.json, "w") as jf:
            try:
                shell.check_output(cmdstr)
                jf.write(format_json(cmdstr, "Success", 0, input, output, params))
            except subprocess.CalledProcessError as e:
                jf.write(format_json(cmdstr, "Failed", e.returncode, input, output, params))
                raise e
