import { useCallback, useState } from 'react';

import { useNavigate } from 'react-router-dom';

import { Form, Input, Button, Upload, message, Select } from 'antd';

import { UploadOutlined } from '@ant-design/icons';

import {
  ButtonPanel,
  PleaseWaitModal,
  showError,
  Error,
  Loading,
} from 'components';
import { normFile, getFalse } from 'utils';

function VcfUpload({ refs, createVcf }) {
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const onFinish = useCallback(
    ({ file, reference, gtf, ...values }) => {
      new Promise((resolve, reject) => {
        setLoading(true);
        const params = {
          ...values,
          filetype: 'vcf',
        };
        createVcf({ file, reference, gtf }, params, resolve, reject);
      }).then(
        (vcf) => {
          setLoading(false);
          message.success('Upload successful!');
          navigate(`../${vcf.id}`);
        },
        (error) => {
          setLoading(false);
          return showError(error);
        }
      );
    },
    [createVcf, navigate]
  );

  const onClickCancel = useCallback(() => navigate(-1), [navigate]);

  if (refs.rejected) {
    return <Error reason={refs.reason} />;
  }
  if (!refs.fulfilled) {
    return <Loading />;
  }

  return (
    <>
      <h1>Upload a new reference VCF</h1>
      <PleaseWaitModal loading={loading} />
      <Form
        initialValues={{
          refid: refs.value.length > 0 ? null : '__custom__',
        }}
        layout="vertical"
        name="uploadvcf"
        onFinish={onFinish}
      >
        <Form.Item
          label="Alias"
          name="alias"
          extra="An alias for the file, so that you can easily retrieve it in the future. Autogenerated if missing."
        >
          <Input />
        </Form.Item>

        <Form.Item
          label="Description"
          name="description"
          rules={[
            {
              required: true,
              message:
                'Please provide a brief description of the reference VCF!',
            },
          ]}
          extra="A brief description of the file, so that you can remember what it contains (or how it has been generated)."
        >
          <Input.TextArea />
        </Form.Item>

        <Form.Item
          label="Reference genome"
          name="refid"
          rules={[
            {
              required: true,
              message: 'Please provide a reference genome!',
            },
          ]}
          extra={
            <>
              Select a reference genome from the ones provided by MALVIRUS{' '}
              <b>or</b> select <em>Custom reference</em> and upload a custom
              reference genomic sequence in a FASTA file.
            </>
          }
        >
          <Select>
            {refs.value.map((ref) => (
              <Select.Option key={ref.id} value={ref.id}>
                {ref.id} | {ref.alias}
              </Select.Option>
            ))}
            <Select.Option key="__custom__" value="__custom__">
              <em>{'<Custom reference>'}</em>
            </Select.Option>
          </Select>
        </Form.Item>

        <Form.Item dependencies={['refid']} noStyle>
          {({ getFieldValue }) => {
            if (getFieldValue('refid') !== '__custom__') return null;
            return (
              <>
                <Form.Item
                  name="reference"
                  label="Reference genomic sequence (FASTA)"
                  valuePropName="fileList"
                  getValueFromEvent={normFile}
                  rules={[
                    {
                      required: true,
                      message:
                        'Please select a FASTA file containing the reference genomic sequence!',
                    },
                  ]}
                >
                  <Upload beforeUpload={getFalse}>
                    <Button icon={<UploadOutlined />}>Select file</Button>
                  </Upload>
                </Form.Item>
                <Form.Item
                  name="gtf"
                  label="Gene annotation (GTF)"
                  valuePropName="fileList"
                  getValueFromEvent={normFile}
                  extra="A file containing the gene annotations for the given reference sequence. Used only for annotation and visualization of the final variant calls."
                >
                  <Upload beforeUpload={getFalse}>
                    <Button icon={<UploadOutlined />}>Select file</Button>
                  </Upload>
                </Form.Item>
              </>
            );
          }}
        </Form.Item>

        <Form.Item
          name="file"
          label="Reference VCF"
          valuePropName="fileList"
          getValueFromEvent={normFile}
          rules={[
            { required: true, message: 'Please select a reference VCF!' },
          ]}
          extra="A file containing the positions of the reference genomic sequence on which variants will be called."
        >
          <Upload beforeUpload={getFalse}>
            <Button icon={<UploadOutlined />}>Select file</Button>
          </Upload>
        </Form.Item>
        <ButtonPanel>
          <Button type="primary" htmlType="submit" loading={loading}>
            Submit
          </Button>
          <Button type="default" onClick={onClickCancel}>
            Cancel
          </Button>
        </ButtonPanel>
      </Form>
    </>
  );
}

export default VcfUpload;
