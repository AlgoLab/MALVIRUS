import React, { useCallback, useState } from 'react';

import { useNavigate } from 'react-router-dom';

import { Form, Input, Button, Upload, message, InputNumber } from 'antd';

import { UploadOutlined } from '@ant-design/icons';

import { normFile, getFalse } from 'utils';
import { ButtonPanel, showError } from 'components';
import params from 'utils/call-params';

function VcfNew({ createVcf }) {
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const onFinish = useCallback(
    ({ file, reference, gtf, ...values }) => {
      new Promise((resolve, reject) => {
        setLoading(true);
        const params = {
          ...values,
          filetype: 'fasta',
        };
        createVcf({ file, reference, gtf }, params, resolve, reject);
      }).then(
        (vcf) => {
          setLoading(false);
          message.success('Job submission successful!');
          navigate(`../${vcf.id}`);
        },
        (error) => {
          setLoading(false);
          return showError(error);
        }
      );
    },
    [createVcf, navigate]
  );

  const onClickCancel = useCallback(() => navigate(-1), [navigate]);
  return (
    <>
      <h1>Create a new reference VCF from genomic sequences</h1>
      <Form
        initialValues={{ cores: 4 }}
        layout="vertical"
        name="newvcf"
        onFinish={onFinish}
      >
        <Form.Item
          label="Alias"
          name="alias"
          extra="An alias for the job, so that you can easily retrieve it in the future. Autogenerated if missing."
        >
          <Input />
        </Form.Item>

        <Form.Item
          label="Description"
          name="description"
          rules={[
            {
              required: true,
              message:
                'Please provide a brief description of the set of genomic sequences!',
            },
          ]}
          extra="A brief description of the set of genomic sequences, so that you can remember what it contains (or how it has been generated)."
        >
          <Input.TextArea />
        </Form.Item>

        <Form.Item
          name="reference"
          label="Reference genomic sequence (FASTA)"
          valuePropName="fileList"
          getValueFromEvent={normFile}
          rules={[
            {
              required: true,
              message:
                'Please select a FASTA file containing the reference genomic sequence!',
            },
          ]}
        >
          <Upload beforeUpload={getFalse}>
            <Button icon={<UploadOutlined />}>Select file</Button>
          </Upload>
        </Form.Item>

        <Form.Item
          name="gtf"
          label="Gene annotation (GTF)"
          valuePropName="fileList"
          getValueFromEvent={normFile}
          extra="A file containing the gene annotations for the given reference sequence. Used only for annotation and visualization of the final variant calls."
        >
          <Upload beforeUpload={getFalse}>
            <Button icon={<UploadOutlined />}>Select file</Button>
          </Upload>
        </Form.Item>

        <Form.Item
          name="file"
          label="Population genomic sequences (FASTA)"
          valuePropName="fileList"
          getValueFromEvent={normFile}
          rules={[
            {
              required: true,
              message:
                'Please select a FASTA file containing the population genomic sequences!',
            },
          ]}
        >
          <Upload beforeUpload={getFalse}>
            <Button icon={<UploadOutlined />}>Select file</Button>
          </Upload>
        </Form.Item>

        <Form.Item
          label={params.cores.label}
          name="cores"
          rules={[
            {
              required: true,
              message: 'Please provide a valid number!',
            },
          ]}
          extra={params.cores.extra}
        >
          <InputNumber min={1} type="number" />
        </Form.Item>

        <ButtonPanel>
          <Button type="primary" htmlType="submit" loading={loading}>
            Submit
          </Button>
          <Button type="default" onClick={onClickCancel}>
            Cancel
          </Button>
        </ButtonPanel>
      </Form>
    </>
  );
}

export default VcfNew;
